name: "CI/CD Pipeline (Node.js + PostgreSQL + Redis)"

on:
  push:
    branches-ignore:
      - main
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: "Środowisko docelowe (staging/production)"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: 18
  CACHE_VERSION: "v1"

jobs:
  ################################################
  # 1. Faza wstępna (równoległe: lint)
  ################################################

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint


  ################################################################
  # 2. Testy jednostkowe w matrixie (różne wersje Node.js + cache)
  ################################################################

  unit_tests:
    name: Unit Testy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node-version }}"

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        id: npm_install
        continue-on-error: true
        run: npm ci

      - name: Upload npm debug log (jeśli npm ci się nie powiódł)
        if: steps.npm_install.outcome == 'failure'
        run: |
          echo "---- Lista plików w katalogu ~/.npm/_logs ----"
          ls ~/.npm/_logs/ || true
          echo "---- Zawartość wszystkich .log w ~/.npm/_logs ----"
          cat ~/.npm/_logs/*.log || true

      - name: Publish npm logs as artifact
        if: steps.npm_install.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-logs-${{ matrix.node-version }}
          path: ~/.npm/_logs/*.log

      - name: Fail the job if npm ci failed
        if: steps.npm_install.outcome == 'failure'
        run: exit 1

      - name: Run Node.js Unit Tests
        if: steps.npm_install.outcome == 'success'
        run: npm run test:unit

      - name: Upload unit coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-${{ matrix.node-version }}
          path: coverage/unit

      - name: Publish coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: coverage/unit/**/*.info
          flags: unit-${{ matrix.node-version }}


  ###########################################
  # 3. Budowanie obrazu produkcyjnego Docker #
  ###########################################

  build_image:
    name: Budowanie i archiwizacja obrazu
    runs-on: ubuntu-latest
    needs: [lint, unit_tests]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set IMAGE_NAME env
        run: echo "IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/kolos" >> $GITHUB_ENV

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: false    # Tylko budowanie
          load: true     # Ładujemy do lokalnego demona

      - name: Save Docker image to tar
        run: |
          docker save $IMAGE_NAME:${{ github.sha }} -o image.tar
          docker save $IMAGE_NAME:latest -o image-latest.tar

      - name: Upload image.tar artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: |
            image.tar
            image-latest.tar


  ##############################################
  # 6. Deployment (symulowany) – tylko na main  #
  ##############################################

  deploy_staging:
    name: Wdrożenie na STAGING (symulacja) i ręczna akceptacja
    runs-on: ubuntu-latest
    needs: build_image
    if: ${{ github.ref == 'refs/heads/main' }}
    environment:
      name: staging
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Simulate deployment
        run: |
          echo ">>> [Simulacja] Wdrażam obraz ${{ secrets.DOCKERHUB_USERNAME }}/kolos:${{ github.sha }} na STAGING"
          echo ">>> [Simulacja] Deployment URL: https://staging.example.com/app/${{ github.sha }}"

      - name: Verify Simulation
        run: echo ">>> [Simulacja] Deployment na staging zakończony (symulacja)."

  ###################################################
  # 7. Develop action – tylko na gałęzi develop      #
  ###################################################

  develop_action:
    name: Develop action
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/dev' }}
    steps:
      - name: Hello if develop branch
        run: echo "Hello!"

  #########################################################
  # 8. Deploy to Production (push obrazu do DockerHuba)  #
  #########################################################
  deploy_production:
    name: Warunkowe wdrożenie na PRODUCTION
    runs-on: ubuntu-latest
    needs:
      - deploy_staging
    if: ${{ github.ref == 'refs/heads/main' }}
    environment:
      name: production
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: ./images

      - name: Set IMAGE_NAME env
        run: echo "IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/kolos" >> $GITHUB_ENV

      - name: Load Docker image from tar
        run: |
          docker load -i images/image.tar
          docker load -i images/image-latest.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image:${{ github.sha }}
        run: docker push $IMAGE_NAME:${{ github.sha }}

      - name: Push image:latest
        run: docker push $IMAGE_NAME:latest


  ###############################################################
  # 9. Raport & powiadomienie – uruchom się zawsze niezależnie od wyniku
  ###############################################################
  notify_and_report:
    name: Generate Report & Notify
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit_tests
      - build_image
      - deploy_staging
      - deploy_production
    if: ${{ always() }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Generate raport.txt
        run: |
          {
            echo "CI/CD Pipeline Report"
            echo "Repository: ${{ github.repository }}"
            echo "Workflow run: #${{ github.run_number }} (ID: ${{ github.run_id }})"
            echo "Commit SHA: ${{ github.sha }}"
            echo ""
            echo "Results:"
            echo "  • Lint:             ${{ needs.lint.result }}"
            echo "  • Unit Tests:       ${{ needs.unit_tests.result }}"
            echo "  • Build Image:      ${{ needs.build_image.result }}"
            echo "  • Deploy Staging:   ${{ needs.deploy_staging.result }}"
            echo "  • Deploy Production:${{ needs.deploy_production.result }}"
          } > raport.txt

      - name: Upload raport.txt as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-report-${{ github.run_number }}
          path: raport.txt

      - name: Notify via placeholder
        run: echo "Pipeline ${{ github.run_number }} zakończony. Raport dostępny jako artefakt."

