name: 'Deploy Node Service'
description: 'Kompozytowa akcja: build â–¶ test â–¶ simulate deploy â–¶ optional notify'
author: 'DevOps Team'

inputs:
  environment:
    description: 'Docelowe Å›rodowisko (staging/production)'
    required: true
    default: 'staging'
  version:
    description: 'Commit SHA lub tag wersji do wdroÅ¼enia'
    required: true
  notify-team:
    description: 'Czy wypisaÄ‡ powiadomienie o wdroÅ¼eniu? (true/false)'
    required: false
    default: 'false'
#  github-token:
#    description: 'Token GitHub do operacji API (zwykle ${{ secrets.GH_TOKEN }})'
#    required: true

outputs:
  deployment_url:
    description: 'PeÅ‚ny URL, pod ktÃ³rym dostÄ™pna jest aplikacja'
    value: ${{ steps.deploy.outputs.deployment_url }}
  deployment_time:
    description: 'Czas zakoÅ„czenia wdroÅ¼enia (UTC, ISO8601)'
    value: ${{ steps.deploy.outputs.deployment_time }}

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci
      shell: bash

    - name: Run unit & integration tests
      run: npm test
      shell: bash

    - name: Determine deployment parameters
      id: deploy
      shell: bash
      run: |
        # wybieramy bazowy URL w zaleÅ¼noÅ›ci od Å›rodowiska
        if [ "${{ inputs.environment }}" = "production" ]; then
          BASE_URL="https://lab14.example.com"
        else
          BASE_URL="https://staging.lab14.example.com"
        fi

        echo "ðŸš€ Deploying version ${{ inputs.version }} to ${{ inputs.environment }} at $BASE_URL"

        DEPLOY_URL="$BASE_URL/${{ inputs.version }}"
        echo "deployment_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "deployment_time=$TIMESTAMP" >> $GITHUB_OUTPUT

    - name: Notify team about deployment
      if: ${{ inputs['notify-team'] == 'true' }}
      uses: actions/github-script@v6
      with:
#        github-token: ${{ inputs.github-token }}
        script: |
          const url  = "${{ steps.deploy.outputs.deployment_url }}";
          const time = "${{ steps.deploy.outputs.deployment_time }}";
          github.issues.createComment({
            issue_number: context.issue.number || 0,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Aplikacja **${{ inputs.version }}** wdroÅ¼ona w **${{ inputs.environment }}**!\n> URL: ${url}\n> Czas: ${time}`
          });
